/**
 * Основной класс для модуля.
 * Этот класс предоставляет базовую функциональность для всех модулей.
 * У него есть базовые методы и свойства, которые будут наследоваться или переопределяться в дочерних классах.
 */
export class Module {
  /**
   * Конструктор класса Module.
   *
   * @param {string} type - Уникальный идентификатор типа модуля.
   * @param {string} text - Отображаемый текст для модуля.
   */
  constructor(type, text) {

    // Проверяем, передан ли параметр "type". Если нет - выбрасываем ошибку.
    if (!type) {
      throw new Error('Please specify "type" param')
    }

    // Проверяем, передан ли параметр "text". Если нет - выбрасываем ошибку.
    if (!text) {
      throw new Error('Please specify "text" param')
    }

    // Инициализация свойства "type" значением переданным в конструктор.
    this.type = type;

    // Инициализация свойства "text" значением переданным в конструктор.
    this.text = text;
  }

  /**
   * Метод, который должен быть реализован в каждом дочернем модуле.
   * В базовой реализации он выбрасывает ошибку, чтобы разработчик понимал, что этот метод нужно реализовать в дочерних классах.
   */
  trigger() {
    throw new Error(`Trigger method should be implemented in module "${this.type}"`)
  }

  /**
   * Метод, который конвертирует текущий модуль в HTML-строку.
   *
   * @returns {string} Возвращает строку с HTML-представлением модуля для отображения в меню.
   */
  toHTML() {
    return `<li class="menu-item" data-type="${this.type}">${this.text}</li>`
  }
}
